# -*- coding: utf-8 -*-
"""boto3 github actions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SORx09JfzzDLBJzfrkvUb5u9kkOn0YGl
"""

import boto3, json
session = boto3.Session(
    aws_access_key_id='AKIA27DXC5JDV5DNMDRI',
    aws_secret_access_key='Ez0crhvvZa249v91b7LLLjQbcBT+3nZZTuKZxzIv',
    region_name='ap-south-1'  # Replace with your desired AWS region
)
iam = session.client('iam')
# Create the user group
group_response = iam.create_group(
    GroupName='developers'
)

# Create the developer user
developer_response = iam.create_user(
    UserName='developer'
)

# Create the tester user
tester_response = iam.create_user(
    UserName='tester'
)

# Add the developer user to the group
iam.add_user_to_group(
    GroupName='developers',
    UserName='developer'
)

# Add the tester user to the group
iam.add_user_to_group(
    GroupName='developers',
    UserName='tester'
)

# Define the S3 policy for developers
developer_policy = {
    'Version': '2012-10-17',
    'Statement': [{
        'Effect': 'Allow',
        'Action': ['s3:*'],
        'Resource': ['arn:aws:s3:::*']
    }]
}

# Define the policy denying S3 access for testers
tester_policy = {
    'Version': '2012-10-17',
    'Statement': [{
        'Effect': 'Deny',
        'Action': ['s3:*'],
        'Resource': ['arn:aws:s3:::*']
    }]
}

# Attach the S3 policy to the developer user
iam.put_user_policy(
    UserName='developer',
    PolicyName='S3Access',
    PolicyDocument=json.dumps(developer_policy)
)

# Attach the policy denying S3 access to the tester user
iam.put_user_policy(
    UserName='tester',
    PolicyName='NoS3Access',
    PolicyDocument=json.dumps(tester_policy)
)

s3_client = session.client('s3')

bucket_name = 'sportaitechllpbucket'

region = 'ap-south-1'

s3_client.create_bucket(
    Bucket=bucket_name,
    CreateBucketConfiguration={
        'LocationConstraint': region
    }
)
response = s3_client.upload_file('handler.py', bucket_name, 'handler.py')
response=s3_client.download_file(bucket_name, 'handler.py', 'handler.py')

role_name = 'developer'
trust_policy = {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}

import zipfile

def create_zip_with_py_file(zip_filename, py_filename):
    # Open a new zip file in write mode
    with zipfile.ZipFile(zip_filename, 'w') as zip_file:
        # Add the .py file to the zip archive
        zip_file.write(py_filename)

# Example usage
create_zip_with_py_file('lambda.zip', 'handler.py')


lambda_client = session.client("lambda")
with open('lambda.zip', 'rb') as f:
	zipped_code = f.read()

try:
    # Check if the role already exists
    response = iam.get_role(RoleName=role_name)
except iam.exceptions.NoSuchEntityException:
    # Role doesn't exist, so create it
    create_role_response = iam.create_role(
        RoleName=role_name,
        AssumeRolePolicyDocument=json.dumps(trust_policy)
    )

# ARNs of the policies to attach
policy_arns = [
    'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
    'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess',
    'arn:aws:iam::aws:policy/service-role/AWSLambdaRole',
    'arn:aws:iam::aws:policy/AmazonCognitoPowerUser'
]

# Attach each policy to the role
for policy_arn in policy_arns:
    response = iam.attach_role_policy(
        RoleName=role_name,
        PolicyArn=policy_arn
    )

import time
time.sleep(30)

# role = iam.get_role(RoleName='LambdaBasicExecution')
response = iam.get_role(RoleName=role_name)

# Extract the ARN from the response
role_arn = response['Role']['Arn']
response = lambda_client.create_function(
    FunctionName='test',
    Runtime='python3.10',

    Role=role_arn,
    Handler='handler.lambda_handler',
    Code=dict(ZipFile=zipped_code),
    Timeout=300, # Maximum allowable timeout
    # Set up Lambda function environment variables
    Environment={
        'Variables': {
            'Name': 'helloWorldLambda',
            'Environment': 'prod'
        }
    },
)
function_arn = response['FunctionArn']
print('lambda_function_arn:', function_arn)
print(response)


cognito_client = session.client('cognito-idp')
# Create a Cognito user pool
response = cognito_client.create_user_pool(
        PoolName='MyUserPool',
        AutoVerifiedAttributes=['email'],
        Schema=[
            {
                'Name': 'email',
                'AttributeDataType': 'String',
                'Required': True
            }
        ]
    )

# Extract the user pool ID from the response
user_pool_id = response['UserPool']['Id']

# Create a Cognito user pool client
response = cognito_client.create_user_pool_client(
    UserPoolId=user_pool_id,
    ClientName='MyUserPoolClient',
    GenerateSecret=False
)

# Extract the user pool client ID from the response
user_pool_client_id = response['UserPoolClient']['ClientId']

domain_name = 'coggowthaaaaaaaa'
response = cognito_client.create_user_pool_domain(
    Domain=domain_name,
    UserPoolId=user_pool_id
)


# Enable USER_PASSWORD_AUTH flow for the user pool client
response = cognito_client.update_user_pool_client(
    UserPoolId=user_pool_id,
    ClientId=user_pool_client_id,
    AllowedOAuthFlows=['code', 'implicit'],
    AllowedOAuthScopes=['openid'],
    CallbackURLs=['https://example.com/callback'],
     LogoutURLs=['https://example.com/logout'],
    AllowedOAuthFlowsUserPoolClient=True,
    ExplicitAuthFlows=['USER_PASSWORD_AUTH']
)

email = 'user@example.com'

# Create a new user in the user pool
response = cognito_client.sign_up(
    ClientId=user_pool_client_id,
    Username=email,
    Password='Test@12345',
    UserAttributes=[
        {
            'Name': 'email',
            'Value': email
        }
    ]
)

# Confirm the user's signup (if required)
response = cognito_client.admin_confirm_sign_up(
    UserPoolId=user_pool_id,
    Username=email
)

# Assuming the signup was successful, proceed with authentication
# Authenticate the user and obtain an ID token
response = cognito_client.initiate_auth(
    ClientId=user_pool_client_id,
    AuthFlow='USER_PASSWORD_AUTH',
    AuthParameters={
        'USERNAME': email,
        'PASSWORD': 'Test@12345'
    }
)


id_token = response['AuthenticationResult']['IdToken']
print("ID token:", id_token)


aws_region='ap-south-1'

# Create a Boto3 client for API Gateway
api_client = session.client('apigateway')

# Create a new REST API
response = api_client.create_rest_api(
    name='MyAPIauth',
    description='My first REST API',
    endpointConfiguration={
        'types': ['REGIONAL']
    }
)
# print(response)
# Retrieve the API ID from the response
api_id = response['id']
print('api_id', api_id)

# Wait for API propagation to complete
response = api_client.get_resources(restApiId=api_id)
parent_id = None
# Iterate over the resources and search for the desired parent resource
for resource in response['items']:
        parent_id = resource['id']
        print(parent_id)
        break
# print('parent_id', parent_id)
resource_name='test'
# Create a new resource for the API
responseresource = api_client.create_resource(
    restApiId=api_id,
    parentId=parent_id,
    pathPart=resource_name
)

# Retrieve the resource ID from the response
resource_id = responseresource['id']
print('resource_id', resource_id)
# Create a new GET method for the resource
responsemethod = api_client.put_method(
    restApiId=api_id,
    resourceId=resource_id,
    httpMethod='GET',
    authorizationType='NONE'
)
put_method_res = api_client.put_method_response(
    restApiId=api_id,
    resourceId=resource_id,
    httpMethod='GET',
    statusCode='200'
  )
print(put_method_res)




policy_document = {
    'Version': '2012-10-17',
    'Statement': [{
        'Effect': 'Allow',
        'Principal': {
            'Service': 'apigateway.amazonaws.com'
        },
        'Action': 'sts:AssumeRole'
    }]
}

iam.update_assume_role_policy(
    RoleName=role_name,
    PolicyDocument=json.dumps(policy_document)
)
response = iam.get_role(RoleName=role_name)
current_policy = response['Role']['AssumeRolePolicyDocument']
policy_document = {
    'Version': '2012-10-17',
    'Statement': [{
        'Effect': 'Allow',
        'Principal': {
            'Service': 'lambda.amazonaws.com'
        },
        'Action': 'sts:AssumeRole'
    }]
}

current_policy['Statement'].extend(policy_document['Statement'])
iam.update_assume_role_policy(
    RoleName=role_name,
    PolicyDocument=json.dumps(current_policy)
)

http_method='GET'
responseintegration = api_client.put_integration(
    restApiId=api_id,
    resourceId=resource_id,
    httpMethod=http_method,
    type='AWS',
    credentials=role_arn,
    integrationHttpMethod='POST',
    uri=f'arn:aws:apigateway:{aws_region}:lambda:path/2015-03-31/functions/{function_arn}/invocations'
)
put_integration_response = api_client.put_integration_response(
    restApiId=api_id,
    resourceId=resource_id,
    httpMethod=http_method,
    statusCode='200',
    selectionPattern=''
  )

print(put_integration_response)

response = cognito_client.describe_user_pool(
    UserPoolId=user_pool_id
)

provider_arns = response['UserPool']['Arn']

response = api_client.create_authorizer(
    restApiId=api_id,
    name='CognitoAuthorizer',
    type='COGNITO_USER_POOLS',
    providerARNs=[provider_arns],
    identitySource='method.request.header.Authorization',
    authorizerUri=f'arn:aws:apigateway:{aws_region}:cognito-user-pool-authorizers/aws-cognito',
    authorizerCredentials=role_arn,
    authorizerResultTtlInSeconds=300
)
authorizer_id = response['id']
response = api_client.update_method(
    restApiId=api_id,
    resourceId=resource_id,
    httpMethod=http_method,
    patchOperations=[
        {
            'op': 'replace',
            'path': '/authorizationType',
            'value': 'COGNITO_USER_POOLS'
        },
        {
            'op': 'replace',
            'path': '/authorizerId',
            'value': authorizer_id
        }
    ]
)


responsedep = api_client.create_deployment(
    restApiId=api_id,
    stageName='prod'
)

deployment_id = responsedep['id']

response = api_client.get_stages(
    restApiId=api_id
)

stage_name = response['item'][0]['stageName']

endpoint_url = f'https://{api_id}.execute-api.{aws_region}.amazonaws.com/{stage_name}'

print('API created successfully!')
print('Endpoint URL:', endpoint_url)


import requests

# url is from api gateway
url = endpoint_url+'/test'

# id_token is from Cognito
headers = {
    "Authorization": "Bearer "+id_token
}

response = requests.get(url, headers=headers)

if response.status_code == 200:
    data = response.json()
    # Process the response data
    print(data)
else:
    print("Request failed with status code:", response.status_code)


time.sleep(180)
# Delete the user
# Remove users from groups
users_to_remove = ['developer', 'tester']
group_names = ['developers']

for user in users_to_remove:
    for group_name in group_names:
        try:
            iam.remove_user_from_group(GroupName=group_name, UserName=user)
            print(f"User '{user}' removed from group '{group_name}'")
        except iam.exceptions.NoSuchEntityException:
            print(f"User '{user}' not found in group '{group_name}'")


# Detach policies from users
for user in users_to_remove:
    attached_policies = iam.list_attached_user_policies(UserName=user)['AttachedPolicies']
    for policy in attached_policies:
        policy_arn = policy['Arn']
        iam.detach_user_policy(UserName=user, PolicyArn=policy_arn)
        print(f"Policy '{policy_arn}' detached from user '{user}'")

# Delete inline policies from users
for user in users_to_remove:
    inline_policies = iam.list_user_policies(UserName=user)['PolicyNames']
    for policy_name in inline_policies:
        iam.delete_user_policy(UserName=user, PolicyName=policy_name)
        print(f"Inline policy '{policy_name}' deleted from user '{user}'")

# Delete the users
for user in users_to_remove:
    try:
        iam.delete_user(UserName=user)
        print(f"User '{user}' deleted successfully")
    except iam.exceptions.NoSuchEntityException:
        print(f"User '{user}' not found")
iam.delete_group(GroupName='developers')
attached_policies = iam.list_attached_role_policies(RoleName=role_name)['AttachedPolicies']
for policy in attached_policies:
    policy_arn = policy['PolicyArn']
    iam.detach_role_policy(RoleName=role_name, PolicyArn=policy_arn)
    print(f"Policy '{policy_arn}' detached from role '{role_name}'")

# Delete the IAM role
try:
    iam.delete_role(RoleName=role_name)
    print(f"IAM role '{role_name}' deleted successfully")
except iam.exceptions.NoSuchEntityException:
    print(f"IAM role '{role_name}' not found")
s3_client.delete_object(Bucket=bucket_name, Key='handler.py')
s3_client.delete_bucket(Bucket=bucket_name)
response = api_client.delete_rest_api(
    restApiId=api_id
)
response = lambda_client.delete_function(FunctionName='test')
response = cognito_client.delete_user_pool_domain(
    Domain=domain_name,
    UserPoolId=user_pool_id)
response = cognito_client.delete_user_pool(
    UserPoolId=user_pool_id
)